# SPRING transformer for the GroPoint Profile 8 segment soil moisture sensor
#
input:
  nats_jetstream:
    urls: ["nats://chirpstack:${nats_chirpstack_passwd}@nats"]
    durable: "rpc-gropoint_8segment"
    stream: "chirpstack-events"
    ack_wait: 30s

pipeline:
  processors:
    - mapping: |-
        # Don't process messages from other devices
        root = match this.deviceInfo.deviceProfileName {
          "GroPoint Profile 8 Segment" => root,
          _ => deleted()
        }

        # Only process port #2 uplinks
        root = if this.fPort != 2 { deleted() }

    - try:
        - resource: chirpstack_schema
        - resource: codec
        - unarchive:
            format: json_array

    - catch:
        - log:
            level: ERROR
            message: "Message (stream sequence ${!@nats_sequence_stream}) processing failed: ${!error()}"

output:
  switch:
    cases:
      - check: this.msg_type == "lorawan"
        output:
          resource: lorawan

      - check: this.msg_type == "moisture"
        output:
          resource: moisture

      - check: this.msg_type == "temperature"
        output:
          resource: temperature

processor_resources:
  - label: chirpstack_schema
    json_schema:
      schema: |-
        {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "type": "object",
          "properties": {
            "time": {
              "type": "string"
            },
            "deviceInfo": {
              "type": "object",
              "properties": {
                "deviceProfileName": {
                  "type": "string"
                },
                "devEui": {
                  "type": "string"
                }
              },
              "required": [
                "deviceProfileName",
                "devEui"
              ]
            },
            "dr": {
              "type": "integer"
            },
            "fCnt": {
              "type": "integer"
            },
            "fPort": {
              "type": "integer"
            },
            "data": {
              "type": "string"
            },
            "rxInfo": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "rssi": {
                      "type": "integer"
                    },
                    "snr": {
                      "type": "number"
                    },
                    "channel": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "rssi"
                  ]
                }
              ]
            },
            "txInfo": {
              "type": "object",
              "properties": { }
            }
          },
          "required": [
            "time",
            "deviceInfo",
            "dr",
            "fCnt",
            "fPort",
            "data",
            "rxInfo",
            "txInfo"
          ]
        }

  - label: codec
    mapping: |-
      let items = []

      #############################
      # Parse the Dragino message #
      #############################
      let data = this.data.decode("base64")

      ###############
      # Header data #
      ###############
      let time = this.time
      let device_id = "lorawan:" + this.deviceInfo.devEui

      ################
      # LoRaWAN Data #
      ################
      let snr = this.rxInfo.map_each(d -> d.snr).filter(s -> s != null)
      let items = $items.append({   
          "msg_type": "lorawan",
          "time": $time,
          "device_id": $device_id,
          "dr": this.dr,
          "f_cnt": this.fCnt,
          "f_port": this.fPort,
          "channel": this.rxInfo.index(0).channel,
          "rssi": this.rxInfo.map_each(d -> d.rssi).max(),
          "snr": if $snr.length() > 0 { $snr.max() } else { null },
          "txInfo": this.txInfo,
          "rxInfo": this.rxInfo,
          "bat_v": ($data.index(1).number() + ($data.index(0).number() * 256)) / 1000
      })

      ###########################
      # Parse the SDI-12 output #
      ###########################
      map parse_values {
          root = this.split("+").slice(1).map_each(num -> num.trim().number())
      }

      # Soil Moisture
      # First SDI-12 response
      let data = $data.slice(3)
      let end = $data.index(1)+1
      let moisture = if $data.index(0) == 241 {
          $data.slice(2, $end).apply("parse_values")
      } else {
          throw("Not expected format, missing first moisture reponse")
      }

      # Second SDI-12 response
      let data = $data.slice($data.index(1)+2)
      let end = $data.index(1)+1
      let moisture = if $data.index(0) == 242 {
          $moisture.concat($data.slice(2, $end).apply("parse_values"))
      } else {
          throw("Not expected format, missing second moisture reponse")
      }

      let moisture = $moisture.enumerated().map_each(i -> {
        "msg_type": "moisture",
        "time": $time,
        "device_id": $device_id,
        "depth_cm": 7.5+i.index*15,
        "vwc": i.value
      })
      let items = $items.merge($moisture)

      # Soil Temperature
      # First SDI-12 response
      let data = $data.slice($data.index(1)+2)
      let end = $data.index(1)+1
      let temperature = if $data.index(0) == 243 {
          $data.slice(2, $end).apply("parse_values")
      } else {
          throw("Not expected format, missing first temp reponse")
      }

      # Second SDI-12 response
      let data = $data.slice($data.index(1)+2)
      let end = $data.index(1)+1
      let temperature = if $data.index(0) == 244 {
          $temperature.concat($data.slice(2, $end).apply("parse_values"))
      } else {
          throw("Not expected format, missing second temp reponse")
      }

      let depths = [3.5, 10, 20, 30, 45, 60, 75, 90, 105, 120]
      let temperature = $temperature.enumerated().map_each(i -> {
        "msg_type": "temperature",
        "time": $time,
        "device_id": $device_id,
        "depth_cm": $depths.index(i.index), 
        "temp_c": i.value
      })
      let items = $items.merge($temperature)

      root = $items

output_resources:
  - label: lorawan
    sql_insert:
      driver: "postgres"
      dsn: "postgres://data:${tsdb_data_passwd}@tsdb/data?ssl=prefer"
      table: lorawan
      columns:
        [
          ts,
          device_id,
          dr,
          f_cnt,
          f_port,
          channel,
          rssi,
          snr,
          rxinfo,
          txinfo,
          bat_v,
        ]
      args_mapping: |
        root = [
          this.time, 
          this.device_id,
          this.dr,
          this.f_cnt,
          this.f_port,
          this.channel,
          this.rssi,
          this.snr,
          this.rxInfo.format_json(no_indent: true).string(),
          this.txInfo.format_json(no_indent: true).string(),
          this.bat_v
        ]
      suffix: ON CONFLICT (device_id, ts) DO NOTHING
      conn_max_idle: 2
      batching:
        count: 1000
        period: 1s

  - label: moisture
    sql_insert:
      driver: "postgres"
      dsn: "postgres://data:${tsdb_data_passwd}@tsdb/data?ssl=prefer"
      table: soil_moisture
      columns: [ts, device_id, depth_cm, vwc, ec_us_cm]
      args_mapping: |
        root = [
          this.time, 
          this.device_id,
          this.depth_cm,
          this.vwc,
          NULL
        ]
      suffix: ON CONFLICT (device_id, depth_cm, ts) DO NOTHING
      conn_max_idle: 2
      batching:
        count: 1000
        period: 1s

  - label: temperature
    sql_insert:
      driver: "postgres"
      dsn: "postgres://data:${tsdb_data_passwd}@tsdb/data?ssl=prefer"
      table: soil_temp
      columns: [ts, device_id, depth_cm, temp_c]
      args_mapping: |
        root = [
          this.time, 
          this.device_id,
          this.depth_cm,
          this.temp_c
        ]
      suffix: ON CONFLICT (device_id, depth_cm, ts) DO NOTHING
      conn_max_idle: 2
      batching:
        count: 1000
        period: 1s
